package olga0147.ex2;

/**
 * Память JVM = heap (куча, в ней данные приложения) + non-heap (в которой хранится код программы и другие вспомогательные данные)
 * 
 * Объекты Java находятся в области, называемой кучей. 
 * Куча создается при запуске JVM и может увеличиваться или уменьшаться в размере во время выполнения приложения. 
 * Когда куча заполняется, собирается мусор. 
 * Во время сборки мусора объекты, которые больше не используются, очищаются, освобождая место для новых объектов.
 * 
 * Все объекты, которые явно или неявно создаются Java-приложением, размещаются в куче.
 * 
 * JVM использует больше памяти, чем просто кучу. Например, 
 * *методы Java, 
 * *стеки потоков и 
 * *собственные дескрипторы 
 * размещаются в памяти отдельно от кучи, так же как и внутренние структуры данных JVM.
 * 
 * 
 * Локальные области потока (The thread local areas = TLA) - это свободные фрагменты, зарезервированные из кучи 
 * и предоставленные потоку Java для эксклюзивного использования =
 * области памяти, выделенные эксклюзивно каждому потоку, создание объектов в которых очень быстрое за счет отсутствия синхронизации.
 * Когда TLA становится полным, поток просто запрашивает новый TLA. TLA резервируются из питомника (nursery), 
 * если таковой существует, в противном случае они резервируются где угодно в куче.
 *  
 * 
 * 
 * Небольшие объекты размещаются в TLA-ах.
 * 
 * Большие объекты, которые не помещаются в TLA, размещаются непосредственно в куче. 
 * Когда nursery заполнена, то больше объекты размещаются в old space.
 */
public class Memory {
	
	class MemoryInner {
		Integer i;
	}
	
	public void run() {
		MemoryInner mi;//объявили переменную. Она является ссылкой. Память не выделена
		
	}

}
