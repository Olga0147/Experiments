package olga0147.ex2;

/**
 * Память JVM = heap (куча, в ней данные приложения) + non-heap (в которой хранится код программы и другие вспомогательные данные)
 * 
 * Все объекты, которые явно или неявно создаются Java-приложением, размещаются в куче.
 * Куча создается при запуске JVM и может увеличиваться или уменьшаться в размере во время выполнения приложения. 
 * Когда куча заполняется, собирается мусор. 
 * Во время сборки мусора объекты, которые больше не используются, очищаются, освобождая место для новых объектов.
 * 
 * non-heap: методы Java, стеки потоков, собственные дескрипторы,внутренние структуры данных JVM.
 * 
 * 
 * Локальные области потока (The thread local areas = TLA) - 
 * области памяти, выделенные эксклюзивно каждому потоку, создание объектов в которых очень быстрое за счет отсутствия синхронизации.
 * Когда TLA становится полным, поток просто запрашивает новый TLA. TLA резервируются из питомника (nursery), 
 * если таковой существует, в противном случае они резервируются где угодно в куче.
 *  
 * Небольшие объекты размещаются в TLA-ах.
 * 
 * Большие объекты, которые не помещаются в TLA, размещаются непосредственно в куче. 
 * Когда nursery заполнена, то больше объекты размещаются в old space.
 * 
 * Слабая гипотеза о поколениях: вероятность смерти объекта, как функция от возраста, снижается очень быстро. 
 * Т.е. подавляющее большинство объектов живут крайне недолго. 
 * 
 * Объекты разделены на младшее поколение (young generation) и старшее поколение (old generation) условно и физически в разных регионах памяти. 
 * Процессы сборки мусора разделяются на малую сборку (minor GC), затрагивающую только младшее поколение, и полную сборку (full GC), 
 * которая может затрагивать оба поколения. 
 * 
 * Малые сборки выполняются часто. Полные сборки выполняются тогда, когда текущий объем выделенной программе памяти близок к исчерпанию.
 * 
 * Объекты из младшего поколения по мере выживания в сборках мусора переходят в старшее поколение.
 * 
 * Максимальная задержка — максимальное время, на которое сборщик приостанавливает выполнение программы для выполнения одной сборки.
 * Остановвки - stop-the-world (или STW)
 * 
 * Корни (roots), к каковым относятся ссылки из стеков потоков, статические члены классов и т. п. 
 * 
 * 
 * «HotSpot» — основная виртуальная машина Java (JVM) как для клиентских, так и для серверных компьютеров, выпускаемая корпорацией «Oracle». 
 * GC в Java HotSpot VM есть разные, например: Serial GC. Далее его принципы
 */
public class Memory {
	
	class MemoryInner {
		Integer i;
	}
	
	public void run() {
		MemoryInner mi;//объявили переменную. Она является ссылкой. Память не выделена
		
	}

}
